
AVRASM ver. 2.1.57  C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\main.asm Tue Nov 24 02:47:07 2015

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.90\avrasm\inc\m328def.inc'
C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\main.asm(1): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.90\avrasm\inc\M328DEF.INC'
C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\main.asm(48): Including file 'C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\func_test_m1.asm'
C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\main.asm(49): Including file 'C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\func_test_m2.asm'
C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\main.asm(51): Including file 'C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\time.asm'
C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\main.asm(52): Including file 'C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\rwd_en_ram.asm'
C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\main.asm(53): Including file 'C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\copy_ram_to_sd.asm'
C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\main.asm(54): Including file 'C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\temperatura.asm'
C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\main.asm(56): Including file 'C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\tx.asm'
C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\main.asm(57): Including file 'C:\Users\coco\avr\labodemicro\labodemicro\TPCodigo\TPLDM328\TPLDM328\setup.asm'
                 
                 .INCLUDE "M328DEF.INC"				; Incluye definición archivos 
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328.xml ***********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m328def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega328
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega328
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M328DEF_INC_
                 #define _M328DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega328
                 #pragma AVRPART ADMIN PART_NAME ATmega328
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x95
                 .equ	SIGNATURE_002	= 0x14
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                 .equ	PRR	= 0x64	; MEMORY MAPPED
                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	SPMCSR	= 0x37
                 .equ	MCUCR	= 0x35
                 .equ	MCUSR	= 0x34
                 .equ	SMCR	= 0x33
                 .equ	ACSR	= 0x30
                 .equ	SPDR	= 0x2e
                 .equ	SPSR	= 0x2d
                 .equ	SPCR	= 0x2c
                 .equ	GPIOR2	= 0x2b
                 .equ	GPIOR1	= 0x2a
                 .equ	OCR0B	= 0x28
                 .equ	OCR0A	= 0x27
                 .equ	TCNT0	= 0x26
                 .equ	TCCR0B	= 0x25
                 .equ	TCCR0A	= 0x24
                 .equ	GTCCR	= 0x23
                 .equ	EEARH	= 0x22
                 .equ	EEARL	= 0x21
                 .equ	EEDR	= 0x20
                 .equ	EECR	= 0x1f
                 .equ	GPIOR0	= 0x1e
                 .equ	EIMSK	= 0x1d
                 .equ	EIFR	= 0x1c
                 .equ	PCIFR	= 0x1b
                 .equ	TIFR2	= 0x17
                 .equ	TIFR1	= 0x16
                 .equ	TIFR0	= 0x15
                 .equ	PORTD	= 0x0b
                 .equ	DDRD	= 0x0a
                 .equ	PIND	= 0x09
                 .equ	PORTC	= 0x08
                 .equ	DDRC	= 0x07
                 .equ	PINC	= 0x06
                 .equ	PORTB	= 0x05
                 .equ	DDRB	= 0x04
                 .equ	PINB	= 0x03
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** USART0 ***********************
                 ; UDR0 - USART I/O Data Register
                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR0A - USART Control and Status Register A
                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                 .equ	U2X0	= 1	; Double the USART transmission speed
                 .equ	UPE0	= 2	; Parity Error
                 .equ	DOR0	= 3	; Data overRun
                 .equ	FE0	= 4	; Framing Error
                 .equ	UDRE0	= 5	; USART Data Register Empty
                 .equ	TXC0	= 6	; USART Transmitt Complete
                 .equ	RXC0	= 7	; USART Receive Complete
                 
                 ; UCSR0B - USART Control and Status Register B
                 .equ	TXB80	= 0	; Transmit Data Bit 8
                 .equ	RXB80	= 1	; Receive Data Bit 8
                 .equ	UCSZ02	= 2	; Character Size
                 .equ	TXEN0	= 3	; Transmitter Enable
                 .equ	RXEN0	= 4	; Receiver Enable
                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR0C - USART Control and Status Register C
                 .equ	UCPOL0	= 0	; Clock Polarity
                 .equ	UCSZ00	= 1	; Character Size
                 .equ	UCPHA0	= UCSZ00	; For compatibility
                 .equ	UCSZ01	= 2	; Character Size
                 .equ	UDORD0	= UCSZ01	; For compatibility
                 .equ	USBS0	= 3	; Stop Bit Select
                 .equ	UPM00	= 4	; Parity Mode Bit 0
                 .equ	UPM01	= 5	; Parity Mode Bit 1
                 .equ	UMSEL00	= 6	; USART Mode Select
                 .equ	UMSEL0	= UMSEL00	; For compatibility
                 .equ	UMSEL01	= 7	; USART Mode Select
                 .equ	UMSEL1	= UMSEL01	; For compatibility
                 
                 ; UBRR0H - USART Baud Rate Register High Byte
                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR0L - USART Baud Rate Register Low Byte
                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** TWI **************************
                 ; TWAMR - TWI (Slave) Address Mask Register
                 .equ	TWAM0	= 1	; 
                 .equ	TWAMR0	= TWAM0	; For compatibility
                 .equ	TWAM1	= 2	; 
                 .equ	TWAMR1	= TWAM1	; For compatibility
                 .equ	TWAM2	= 3	; 
                 .equ	TWAMR2	= TWAM2	; For compatibility
                 .equ	TWAM3	= 4	; 
                 .equ	TWAMR3	= TWAM3	; For compatibility
                 .equ	TWAM4	= 5	; 
                 .equ	TWAMR4	= TWAM4	; For compatibility
                 .equ	TWAM5	= 6	; 
                 .equ	TWAMR5	= TWAM5	; For compatibility
                 .equ	TWAM6	= 7	; 
                 .equ	TWAMR6	= TWAM6	; For compatibility
                 
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR1 - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 ; TCCR1C - Timer/Counter1 Control Register C
                 .equ	FOC1B	= 6	; 
                 .equ	FOC1A	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	TOIE2A	= TOIE2	; For compatibility
                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                 
                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                 
                 ; TCCR2A - Timer/Counter2 Control Register A
                 .equ	WGM20	= 0	; Waveform Genration Mode
                 .equ	WGM21	= 1	; Waveform Genration Mode
                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                 
                 ; TCCR2B - Timer/Counter2 Control Register B
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM22	= 3	; Waveform Generation Mode
                 .equ	FOC2B	= 6	; Force Output Compare B
                 .equ	FOC2A	= 7	; Force Output Compare A
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2A - Timer/Counter2 Output Compare Register A
                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; OCR2B - Timer/Counter2 Output Compare Register B
                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                 .equ	EXCLK	= 6	; Enable External Clock Input
                 
                 ; GTCCR - General Timer Counter Control register
                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PSR2	= PSRASY	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register A
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCSRB - The ADC Control and Status register B
                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                 .equ	ACME	= 6	; 
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; DIDR0 - Digital Input Disable Register
                 .equ	ADC0D	= 0	; 
                 .equ	ADC1D	= 1	; 
                 .equ	ADC2D	= 2	; 
                 .equ	ADC3D	= 3	; 
                 .equ	ADC4D	= 4	; 
                 .equ	ADC5D	= 5	; 
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR1 - Digital Input Disable Register 1
                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                 
                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                 
                 ; TCCR0A - Timer/Counter  Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode
                 .equ	WGM01	= 1	; Waveform Generation Mode
                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                 
                 ; TCCR0B - Timer/Counter Control Register B
                 .equ	CS00	= 0	; Clock Select
                 .equ	CS01	= 1	; Clock Select
                 .equ	CS02	= 2	; Clock Select
                 .equ	WGM02	= 3	; 
                 .equ	FOC0B	= 6	; Force Output Compare B
                 .equ	FOC0A	= 7	; Force Output Compare A
                 
                 ; TCNT0 - Timer/Counter0
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0A - Timer/Counter0 Output Compare Register
                 .equ	OCR0A_0	= 0	; 
                 .equ	OCR0A_1	= 1	; 
                 .equ	OCR0A_2	= 2	; 
                 .equ	OCR0A_3	= 3	; 
                 .equ	OCR0A_4	= 4	; 
                 .equ	OCR0A_5	= 5	; 
                 .equ	OCR0A_6	= 6	; 
                 .equ	OCR0A_7	= 7	; 
                 
                 ; OCR0B - Timer/Counter0 Output Compare Register
                 .equ	OCR0B_0	= 0	; 
                 .equ	OCR0B_1	= 1	; 
                 .equ	OCR0B_2	= 2	; 
                 .equ	OCR0B_3	= 3	; 
                 .equ	OCR0B_4	= 4	; 
                 .equ	OCR0B_5	= 5	; 
                 .equ	OCR0B_6	= 6	; 
                 .equ	OCR0B_7	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	PSR10	= PSRSYNC	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; EICRA - External Interrupt Control Register
                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                 
                 ; EIMSK - External Interrupt Mask Register
                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                 
                 ; EIFR - External Interrupt Flag Register
                 .equ	INTF0	= 0	; External Interrupt Flag 0
                 .equ	INTF1	= 1	; External Interrupt Flag 1
                 
                 ; PCICR - Pin Change Interrupt Control Register
                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                 
                 ; PCMSK2 - Pin Change Mask Register 2
                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                 
                 ; PCMSK1 - Pin Change Mask Register 1
                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                 
                 ; PCMSK0 - Pin Change Mask Register 0
                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                 
                 ; PCIFR - Pin Change Interrupt Flag Register
                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCSR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEARL - EEPROM Address Register Low Byte
                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                 
                 ; EEARH - EEPROM Address Register High Byte
                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                 
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEPE	= 1	; EEPROM Write Enable
                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; CLKPR - Clock Prescale Register
                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                 
                 ; SPMCSR - Store Program Memory Control and Status Register
                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                 .equ	SPMEN	= 0	; Store Program Memory
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                 .equ    SIGRD   = 5 ; Signature Row Read
                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 .equ	IVCE	= 0	; 
                 .equ	IVSEL	= 1	; 
                 .equ	PUD	= 4	; 
                 
                 ; MCUSR - MCU Status Register
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	EXTREF	= EXTRF	; For compatibility
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; SMCR - Sleep Mode Control Register
                 .equ	SE	= 0	; Sleep Enable
                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                 
                 ; GPIOR2 - General Purpose I/O Register 2
                 .equ	GPIOR20	= 0	; 
                 .equ	GPIOR21	= 1	; 
                 .equ	GPIOR22	= 2	; 
                 .equ	GPIOR23	= 3	; 
                 .equ	GPIOR24	= 4	; 
                 .equ	GPIOR25	= 5	; 
                 .equ	GPIOR26	= 6	; 
                 .equ	GPIOR27	= 7	; 
                 
                 ; GPIOR1 - General Purpose I/O Register 1
                 .equ	GPIOR10	= 0	; 
                 .equ	GPIOR11	= 1	; 
                 .equ	GPIOR12	= 2	; 
                 .equ	GPIOR13	= 3	; 
                 .equ	GPIOR14	= 4	; 
                 .equ	GPIOR15	= 5	; 
                 .equ	GPIOR16	= 6	; 
                 .equ	GPIOR17	= 7	; 
                 
                 ; GPIOR0 - General Purpose I/O Register 0
                 .equ	GPIOR00	= 0	; 
                 .equ	GPIOR01	= 1	; 
                 .equ	GPIOR02	= 2	; 
                 .equ	GPIOR03	= 3	; 
                 .equ	GPIOR04	= 4	; 
                 .equ	GPIOR05	= 5	; 
                 .equ	GPIOR06	= 6	; 
                 .equ	GPIOR07	= 7	; 
                 
                 ; PRR - Power Reduction Register
                 .equ	PRADC	= 0	; Power Reduction ADC
                 .equ	PRUSART0	= 1	; Power Reduction USART
                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                 .equ	PRTWI	= 7	; Power Reduction TWI
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	CKOUT	= 6	; Clock output
                 .equ	CKDIV8	= 7	; Divide clock by 8
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select reset vector
                 .equ	BOOTSZ0	= 1	; Select boot size
                 .equ	BOOTSZ1	= 2	; Select boot size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	WDTON	= 4	; Watchdog Timer Always On
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	DWEN	= 6	; debugWIRE Enable
                 .equ	RSTDISBL	= 7	; External reset disable
                 
                 ; EXTENDED fuse bits
                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                 .equ	IOEND	= 0x00ff
                 .equ	SRAM_START	= 0x0100
                 .equ	SRAM_SIZE	= 2048
                 .equ	RAMEND	= 0x08ff
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x03ff
                 .equ	EEPROMEND	= 0x03ff
                 .equ	EEADRBITS	= 10
                 #pragma AVRPART MEMORY PROG_FLASH 32768
                 #pragma AVRPART MEMORY EEPROM 1024
                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x3800
                 .equ	NRWW_STOP_ADDR	= 0x3fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x37ff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x3f00
                 .equ	SECONDBOOTSTART	= 0x3e00
                 .equ	THIRDBOOTSTART	= 0x3c00
                 .equ	FOURTHBOOTSTART	= 0x3800
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                 
                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                 
                 #endif  /* _M328DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328.xml ***********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m328def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega328
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega328
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M328DEF_INC_
                 #endif  /* _M328DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                 .EQU LIM_MAX_TABLA_TEMPERATURAS=60	;Max tamaño esperable en tabla en RAM
                 .EQU TAMANIO_TABLA_TEMPERATURA=255	;bytes para llenar con lineas tipo DDMMAAHHMMTTTTT, 
                 .EQU TAMANIO_TEXTO_TEMPERATURA=1	;bytes
                 ;.EQU BARRA='/'
                 ;.EQU DOS_PUNTOS=':'
                 ;.EQU COMA=','
                 ;.EQU PCOMA=';'
                 .EQU LONG_LOG=0x10;	;es el largo que tendra cada liea que se escriba con la T + Fecha en formato "DDMMAAHHMMSTT.T,"
                 
                 .DSEG
                 .org 0x160
                 
                 ;Variables necesarias
000160           	temperatura: .byte TAMANIO_TEXTO_TEMPERATURA	;almacena el dato del medidor de temperatura
000161           	dia: .byte 1
000162           	mes: .byte 1
000163           	anio: .byte 1
000164           	horas: .byte 1
000165           	minutos: .byte 1
000166           	segundos: .byte 1
000167           	set_dia: .byte 1
000168           	set_mes: .byte 1
000169           	set_anio: .byte 1
00016a           	set_horas: .byte 1
00016b           	set_minutos: .byte 1
00016c           	set_segundos: .byte 1
00016d           	tabla_temperaturas: .byte TAMANIO_TABLA_TEMPERATURA
00026c           	tabla_temperaturas_1: .byte TAMANIO_TABLA_TEMPERATURA
00036b           	tabla_temperaturas_2: .byte TAMANIO_TABLA_TEMPERATURA	 
00046a           	ocupacion_tabla_temp_ram: .byte 1	;sirve para registrar qué tan llena está la ram con datos de tmeperatura+ fecha
00046b           	indata: .byte 5
                 
                 .CSEG 
                 .ORG 0x00
000000 c225      RJMP PROGRAMA
                 
                 .ORG INT1addr
000004 940c 0231 JMP WAKEUP
                 
                 .ORG INT0addr
000002 940c 0191 JMP COMUPC   
                 
                 
                 .ORG 0x30
                 /*aqui se incluyen los bloques de codigo que implementemos por separado*/
                 .include "func_test_m1.asm"		;Archivo Test, se puede borrar
                 
                 subrutina_test_m:
                 ;retardo
000030 e025      	LDI R18,5
                 LOOP:
000031 952a      	DEC R18
000032 f7f1      	BRNE LOOP
                 .include "func_test_m2.asm"		;Archivo Test, se puede borrar
000033 9508      
                  * AsmFile1.asm
                  *
                  *  Created: 15/10/2015 01:14:16 p.m.
                  *   Author: mtomas
                  */ 
                 
                  
                 subrutina_test_m2:
                 ;retardo
000034 e025      	LDI R18,5
                 LOOP2:
000035 952a      	DEC R18
000036 f7f1      	BRNE LOOP2
000037 9508      
                 .include "time.asm"				;Rutinas para obtener fecha y hora
                 
                  * AsmFile1.asm
                  *
                  *  Created: 20/10/2015 09:48:29 a.m.
                  *   Author: mtomas
                  */ 
                 
                 DAME_FECHA_HORA:
                 	;utilizaría el RTC parac obtener y guardar la info en las variables:
                 	;dia, mes, anio, horas,minutos.
                 	;El RTC envía datos en formato BCD. Por ejemplo el 50 sería: 0101 0000.
                 	;El contenido de estas variables se coloca en formato BCD.
                 
                 	;Para leer los datos del RTC  primero debemos escribir en el dispositivo (para setear el Address Pointer del device)
                 	;Luego se le envia un READ para obtener los DATOS en esa address.
                 
000038 940e 00b9 	CALL I2C_INIT				;inicializa el modo TWI
                 	
                 	;Master generates Start Condition, status code 0x08 is returned para indicar que la condicion de START se transmitio OK. 
00003a 940e 00c3 	CALL I2C_START				;transmite la condición de START
00003c 940e 00e2 	CALL I2C_READ_STATUS		;lee el registro de Status
00003e 3078      	CPI R23,0x08				;verifica si se transmitio correctamente el START (0x08 es la respuesta esperada)
                 	;BRNE ERROR_I2C_READ_STATUS	;If error, jump to error function
                 
                 	;Master sends slave bus address (SLA en este caso es 0xd1=0b1100 0001), DS1307 returns ACK
00003f ed51      	LDI R21,0b11010001			;bus address del SLAVE DS1307(1101000)+R(1) [es la orden de "leer"]
                 								;A continuacion, escribimos R27 en el I2C Bus
000040 940e 00cb 	CALL I2C_SEND				;envia la info por el bus
                 
                 	;A continuacion se solicita la info al RTC
                 	;En cada pasada se pediran en el siguiente orden: Segundos, Minutos, Horas, Dia, Mes Anio
                 	
000042 940e 00e6 	CALL DAME_DATO_RTC ;deja el dato en R21
000044 775f      	ANDI R21,0x7F			;mascara para sacar los 7 LSB de los SEGUNDOS
000045 2f25      	MOV R18,R21
000046 940e 01db 	call Putchr
                 	;CALL BCD_TO_BIN
000048 9350 0166 	STS segundos,R21
00004a 2f05      	MOV R16,R21
                 	;CALL I2C_READ_STATUS		;read status register
                 	;CPI R23,0x50				;was data transmitted, ack received?
                 	;BRNE ERROR_I2C_READ_STATUS	;if error, jump to error function
                 
00004b 940e 00e6 	CALL DAME_DATO_RTC ;deja el dato en R21
00004d 775f      	ANDI R21,0x7F			;mascara para sacar los 7 LSB de los MINUTOS
                 	;CALL BCD_TO_BIN	
00004e 9350 0165 	STS minutos,R21
                 	;CALL I2C_READ_STATUS		;read status register
                 	;CPI R23,0x50				;was data transmitted, ack received?
                 	;BRNE ERROR_I2C_READ_STATUS	;if error, jump to error function
                 	
000050 940e 00e6 	CALL DAME_DATO_RTC ;deja el dato en R21
                 	;CALL BCD_TO_BIN
000052 735f      	ANDI R21,0x3F			;mascara para sacar los 6 LSB de la HORA
000053 9350 0164 	STS horas,R21
                 	;CALL I2C_READ_STATUS		;read status register
                 	;CPI R23,0x50				;was data transmitted, ack received?
                 	;BRNE ERROR_I2C_READ_STATUS	;if error, jump to error function
                 
000055 940e 00e6 	CALL DAME_DATO_RTC ;deja el dato en R21
                 	;Este dato se obtiene  pero se ignora ya que el Nro de dia de la semana es algo que no utilizamos
                 	;ANDI R21,0x03			;mascara para sacar los 3 LSB del numero de dia de la semana
                 	;CALL BCD_TO_BIN
                 	;STS dia_de_la_semana,R21
                 	;CALL I2C_READ_STATUS		;read status register
                 	;CPI R23,0x50				;was data transmitted, ack received?
                 	;BRNE ERROR_I2C_READ_STATUS	;if error, jump to error function
                 
000057 940e 00e6 	CALL DAME_DATO_RTC ;deja el dato en R21
000059 735f      	ANDI R21,0x3F			;mascara para sacar los 6 LSB del numero de dia en el mes
                 	;CALL BCD_TO_BIN	
00005a 9350 0161 	STS dia,R21
                 	;CALL I2C_READ_STATUS		;read status register
                 	;CPI R23,0x50				;was data transmitted, ack received?
                 	;BRNE ERROR_I2C_READ_STATUS	;if error, jump to error function
                 
00005c 940e 00e6 	CALL DAME_DATO_RTC ;deja el dato en R21
00005e 715f      	ANDI R21,0x1F			;mascara para sacar los 5 LSB del numero de mes
                 	;CALL BCD_TO_BIN	
00005f 9350 0162 	STS mes,R21
                 	;CALL I2C_READ_STATUS		;read status register
                 	;CPI R23,0x50				;was data transmitted, ack received?
                 	;BRNE ERROR_I2C_READ_STATUS	;if error, jump to error function
                 
000061 940e 00e6 	CALL DAME_DATO_RTC ;deja el dato en R21
000063 7f5f      	ANDI R21,0xFF			;mascara para sacar los 8 bits del numero de anio
                 	;CALL BCD_TO_BIN
000064 9350 0163 	STS anio,R21
                 	;CALL I2C_READ_STATUS		;read status register
                 	;CPI R23,0x50				;was data transmitted, ack received?
                 	;BRNE ERROR_I2C_READ_STATUS	;if error, jump to error function
                 	
                 	;Master sends Stop condition, no status code returned
000066 940e 00d5 	CALL I2C_STOP
                 
                 	;ERROR_I2C_READ_STATUS:
                 		;falta escribir que se hace en caso de error
                 	;nop;
000068 9508      ret
                 
                 SET_FECHA:
                 	;configura la fecha en el RTC
000069 940e 00b9 	CALL I2C_INIT		;initialize the I2C module
                 		
                 	;Master generates Start Condition, status code 0x08 is returned
00006b 940e 00c3 	CALL I2C_START		;transmit a START condition
                 
                 	;Master sends slave address (0xd0), slave device returns ACK, status code 0x18
00006d ed50      	LDI R21,0b11010000	;SLA(1101000)+W(0)
00006e 940e 00cb 	CALL I2C_SEND		;transmit R21 to I2C bus
                 	
000070 e057      	LDI R21,0x07		;set register pointer to 07
000071 940e 00cb 	CALL I2C_SEND		;to access the control register
                 	
000073 e050      	LDI R21,0x00		;set control register = 0, lo cual le dice al ds1307 donde va a empezar a escribir la fecha.
000074 940e 00cb 	CALL I2C_SEND		;transmit R21 to I2C bus
000076 940e 00d5 	CALL I2C_STOP		;transmit Stop condition
                 
000078 940e 00dd 	call I2C_DELAY
                 
                 	;Master sends one or more data bytes, slave device returns ACK, status code 0x28
00007a 940e 00c3 	CALL I2C_START		;transmit a START condition
00007c ed50      	LDI R21,0b11010000	;SLA(1101000)+W(0)
00007d 940e 00cb 	CALL I2C_SEND		;transmit R21 to I2C bus
00007f e054      	LDI R21,0x04		;set register pointer to 04
000080 940e 00cb 	CALL I2C_SEND		;to access the control register
000082 9150 0167 	LDS R21,set_dia		;set dia. Usar notacion BCD
000084 940e 00cb 	CALL I2C_SEND		;to access the control register
000086 9150 0168 	LDS R21,set_mes		;set mes. Usar notacion BCD
000088 940e 00cb 	CALL I2C_SEND		;to access the control register
00008a 9150 0169 	LDS R21,set_anio	;set anio. Usar notacion BCD
00008c 940e 00cb 	CALL I2C_SEND		;transmit R21 to I2C bus
                 
                 	;Master generates Stop Condition, no status code returned
00008e 940e 00d5 	CALL I2C_STOP		;transmit Stop condition
000090 9508      ret
                 
                 SET_HORA:
                 	;configura la hora en el RTC
                 	;Vamos a setear el clokc a las 16:58:55 usando el modo de 24 hs.
                 	
000091 940e 00b9 	CALL I2C_INIT	;inicializa el modulo I2c
                 
000093 940e 00c3 	CALL I2C_START		;transmite condición de START
000095 ed50      	LDI R21,0b11010000	;SLA(1101000) + W(0)
000096 940e 00cb 	CALL I2C_SEND		;transmit R21 to I2C bus
000098 e057      	LDI R21,0x07		;set Register Pointer to 07
000099 940e 00cb 	CALL I2C_SEND		;to access the Control Register
00009b e050      	LDI R21,0x00		;set control register = 0
00009c 940e 00cb 	CALL I2C_SEND		;transmit R21 to I2C bus
00009e 940e 00d5 	CALL I2C_STOP		;Transmit a STOP condition
                 
0000a0 940e 00dd 	CALL I2C_DELAY
                 
0000a2 940e 00c3 	CALL I2C_START		;transmit a START condition
0000a4 ed50      	LDI R21,0b11010000	;SLA(1101000)+W(0)
0000a5 940e 00cb 	CALL I2C_SEND		;transmit R21 to I2C bus
0000a7 e050      	LDI R21,0x00		;set register pointer to 0
0000a8 940e 00cb 	CALL I2C_SEND		;Transmit R21 to I2c Bus
0000aa 9150 016c 	LDS R21,set_segundos;set seconds to 0x55=55 BCD
0000ac 940e 00cb 	CALL I2C_SEND		;Transmit R21 too I2C Bus
0000ae 9150 016b 	LDS R21,set_minutos	;Set minutes to 0x58=58 BCD
0000b0 940e 00cb 	CALL I2C_SEND		;transmit R21 to I2C bus
0000b2 9150 016a 	LDS R21,set_horas	;hour = 16 (en modo de 24 hs)
0000b4 940e 00cb 	CALL I2C_SEND		;transmit R21 to I2C bus
0000b6 940e 00d5 	CALL I2C_STOP		;transmit a STOP condition
0000b8 9508      ret
                 
                 I2C_INIT:
                 	;Es la inicializacion 
                 	;The TWI clock speed is usually 100kHz or 400kHz. Tomaremos 100kHz. 
                 	;It is set by writting the proper prescaler and clock rate values to:
                 	; - TWSR (los bits 0 y 1 son el prescaler)
                 	; - TWBR(TWI Bit Rate Register). 
                 	; La formula para verificar si el clock speed es adecuado, es: 
                 	; SCL Frecuency = CPU_CLOCK_frec / (16+2*TWBR*(4^prescaler))
0000b9 e050      	LDI R21,0			
0000ba 9350 00b9 	STS TWSR,R21		;set prescaler bits to zero
0000bc e250      	LDI R21,32		;move 0x32 into r21
0000bd 9350 00b8 	STS TWBR,R21		;SCL freq is 100k for micro de 8Mhz
0000bf e054      	LDI R21,(1<<TWEN)	;move 0x04 into r21
0000c0 9350 00bc 	STS TWCR,R21		;enable the TWI
0000c2 9508      ret
                 
                 I2C_START:
                 	;Se genera la condicion de START
                 	;To generate a start, load TWCR with 0xA4 (0b10100100, esos 3 unos corresponden a TWINT, TWSTA y TWEN), y luego wait.
0000c3 ea54      	LDI R21,(1<<TWINT)|(1<<TWSTA)|(1<<TWEN)
0000c4 9350 00bc 	STS TWCR,R21		;transmit a START condition, es decir el 0x10100100.
                 LOOP_I2C_START:			
0000c6 9150 00bc 	LDS R21,TWCR		;read control registre into R21 para ver si todo esta ok
0000c8 fd57      	SBRC R21,TWINT		;Skip next line if bit TWINT in register R21 is SET (mask the interrupt flag)
0000c9 cffc      	RJMP LOOP_I2C_START	;jump to Loop if TWINT es 1
0000ca 9508      RET
                 
                 I2C_SEND:
0000cb 9350 00bb 	STS TWDR,R21					;put the address of the slave into TWDR: mvoe SLA+W into TWDR
0000cd e854      	LDI R21,(1<<TWINT)|(1<<TWEN)	;Instruccion para Send Data
0000ce 9350 00bc 	STS TWCR,R21					;configure TWCR to send TWDR (put the SEND command in TWCR)
                 LOOP_I2C_SEND:						;monitoring the interrupt flag bit (TWINT) to be set
0000d0 9150 00bc 	LDS R21,TWCR		;read control register (Se monitorea el control register)
0000d2 ff57      	SBRS R21,TWINT		;mask the interrupt flag (skip next line if TWINT is 1)
0000d3 cffc      	RJMP LOOP_I2C_SEND	;jump to W2 if TWINT is 1
0000d4 9508      RET
                 
                 
                 I2C_STOP:
0000d5 e954      	LDI R21,(1<<TWINT)|(1<<TWSTO)|(1<<TWEN)
0000d6 9350 00bc 	STS  TWCR,R21		;Transmit STOP condition
                 LOOP_I2C_STOP:	
0000d8 9150 00bc 	LDS R21,TWCR		;Read control register into R21
0000da ff54      	SBRS R21,TWSTO		;Mask the interrupt flag
0000db cffc      	RJMP LOOP_I2C_STOP	;jump to w3 if TWINT is 1
0000dc 9508      RET
                 
                 I2C_DELAY:
0000dd ef6f      	LDI	R22,0xff	
                 LOOP_I2C_DELAY:	
0000de 956a      	DEC R22		
0000df 0000      	NOP
0000e0 f7e9      	BRNE LOOP_I2C_DELAY
0000e1 9508      RET
                 
                 I2C_READ_STATUS:
0000e2 9170 00b9 	LDS R23,TWSR				;Read status register into r21
0000e4 7f78      	ANDI R23,0xf8				;mask the prescaler bits
0000e5 9508      RET
                 
                 DAME_DATO_RTC:
0000e6 ec54      	LDI R21,(1<<TWINT)|(1<<TWEN)|(1<<TWEA)	;recibir un byte de  DATOS y retornar ACK 
0000e7 9350 00bc 	STS TWCR,R21
                 	LOOP_I2C_READ:
0000e9 9150 00bc 		LDS R21,TWCR		;read control registre into r21
0000eb ff57      		SBRS R21,TWINT		;skip next line if TWINT is 1
0000ec cffc      		RJMP LOOP_I2C_READ
0000ed 9150 00bb 	LDS R21,TWDR			;Se lee el dato que nos envio el slave y se lo guarda en r21
0000ef 9508      RET
                 
                 ;BCD_TO_BIN:
                 ;	MOV R23,R21
                 ;	LSL R23
                 ;	LSL R23
                 ;	LSL R23
                 ;	LSL R23
                 ;	ANDI R23,0x0f
                 ;	MUL R23,10
                 ;	ANDI R21,0x0f
                 ;	ADD R21,R27
                 .include "rwd_en_ram.asm"		;Rutinas para escribir, leer y borrar datos de la ram
                 
                  * datos_en_ram.asm
                  *
                  *  Created: 20/10/2015 09:49:00 a.m.
                  *   Author: mtomas
                  */ 
                 
                 
                 ESCRIBIR_FECHA_HORA_TEMP_EN_RAM:
                 	;recibe el parametro de la fecha y lo escribe en la posicion de ram que se le indique en formato DDMMAAHHMM
                 	;Lueogo de la fecha coloca una "coma" para indicar el fin de linea
                 	
0000f0 9100 0161 	LDS R16,dia ;Se guarda en R16 un DATO de dos digito sen formato BCD
0000f2 2f10      	MOV R17,R16 
0000f3 0f11      	LSL R17
0000f4 0f11      	LSL R17
0000f5 0f11      	LSL R17
0000f6 0f11      	LSL R17
0000f7 701f      	ANDI R17,0x0F ;En R17 esta el primer digito del DATO
0000f8 700f      	ANDI R16,0x0F ;En R16 esta el segundo digito del DATO
0000f9 931d      	ST X+,R17            
0000fa 930d          ST X+,R16
                 
0000fb 9100 0162 	LDS R16,mes  ;Se guarda en R16 un DATO de dos digito sen formato BCD
0000fd 2f10      	MOV R17,R16 
0000fe 0f11      	LSL R17
0000ff 0f11      	LSL R17
000100 0f11      	LSL R17
000101 0f11      	LSL R17
000102 701f      	ANDI R17,0x0F ;En R17 esta el primer digito del DATO
000103 700f      	ANDI R16,0x0F ;En R16 esta el segundo digito del DATO
000104 931d      	ST X+,R17            
000105 930d          ST X+,R16
                 
000106 9100 0163 	LDS R16,anio ;Se guarda en R16 un DATO de dos digito sen formato BCD
000108 2f10      	MOV R17,R16 
000109 0f11      	LSL R17
00010a 0f11      	LSL R17
00010b 0f11      	LSL R17
00010c 0f11      	LSL R17
00010d 701f      	ANDI R17,0x0F ;En R17 esta el primer digito del DATO
00010e 700f      	ANDI R16,0x0F ;En R16 esta el segundo digito del DATO
00010f 931d      	ST X+,R17            
000110 930d          ST X+,R16
                 
                 	; A continuacion se escribe el parametro de la hora
                 	; Lo escribe en la posicion de la ram que se le indique en formato HHMM	
                 	
000111 9100 0164 	LDS R16,horas ;Se guarda en R16 un DATO de dos digito sen formato BCD
000113 2f10      	MOV R17,R16 
000114 0f11      	LSL R17
000115 0f11      	LSL R17
000116 0f11      	LSL R17
000117 0f11      	LSL R17
000118 701f      	ANDI R17,0x0F ;En R17 esta el primer digito del DATO
000119 700f      	ANDI R16,0x0F ;En R16 esta el segundo digito del DATO
00011a 931d      	ST X+,R17            
00011b 930d          ST X+,R16
                 
00011c 9100 0165 	LDS R16,minutos ;Se guarda en R16 un DATO de dos digito sen formato BCD
00011e 2f10      	MOV R17,R16 
00011f 0f11      	LSL R17
000120 0f11      	LSL R17
000121 0f11      	LSL R17
000122 0f11      	LSL R17
000123 701f      	ANDI R17,0x0F ;En R17 esta el primer digito del DATO
000124 700f      	ANDI R16,0x0F ;En R16 esta el segundo digito del DATO
000125 931d      	ST X+,R17            
000126 930d          ST X+,R16
                 
                 	;Se escribe el parametro de la temperatura
                 	;REVISAR como se escribe la temperatura
000127 9100 0160 	LDS R16,temperatura           
000129 930d          ST   X+,R16
                 
                 	;Por ultimo coloca un caracter "coma" para indicar el fin de linea
00012a e20c      	LDI R16,','
00012b 930d      	ST X+,R16
                 
00012c 9100 046a 	LDS R16,ocupacion_tabla_temp_ram	;actualizamos el valor de Ocupacion_tabla_temperaturas_en_ram
00012e e110      	LDI R17,LONG_LOG
00012f 0f01      	ADD R16,R17							;para ello lo que hacemos es sumar el nuevo largo de los datos copiados
000130 9300 046a 	STS ocupacion_tabla_temp_ram,R16
000132 9508      ret
                 
                 BORRAR_TABLA_FECHA_HORA_TEMP_EN_RAM:	
                 	;llenar tabla con ceros y volver puntero al inicio
                 	;Usa R17 y R18
                 
000133 ef1f      	LDI R17,TAMANIO_TABLA_TEMPERATURA ;Contador
000134 e6ad      	LDI XL,LOW(tabla_temperaturas)
000135 e0b1      	LDI XH,HIGH(tabla_temperaturas)
000136 e020      	LDI R18,0x00 ;Valor para rellenar los campos de la tabla
                 
                 	LOOP_BTFHTER:
000137 932d      		ST X+,R18
000138 951a      		DEC R17
000139 f7e9      		BRNE LOOP_BTFHTER
                 
00013a e6ad      		LDI XL,LOW(tabla_temperaturas)
00013b e0b1      		LDI XH,HIGH(tabla_temperaturas)
                 
00013c e010      		LDI R17,0
00013d 9310 046a 		STS ocupacion_tabla_temp_ram,R17 ;marcamos como "0" el nivel de ocupación de la tabla
00013f 9508      ret
                 
                 GET_TABLA_EN_RAM:
                 	;Carga en el puntero Y inicio de la tabla donde se guardan las fechas y la temperatura
000140 e6cd      	LDI YL,LOW(tabla_temperaturas)
000141 e0d1      	LDI YH,HIGH(tabla_temperaturas)
000142 9508      ret
                 
                 RELLENAR_TABLA_CON_CEROS_EN_RAM:
                 	;llenar el final de la tabla con ceros
                 	;Usa R17 y R18 y el puntero X
                 
000143 e020      	LDI R18,0x00 ;Valor para rellenar los campos de la tabla
000144 9110 046a 	LDS R17,ocupacion_tabla_temp_ram
000146 ef0f      	LDI R16,TAMANIO_TABLA_TEMPERATURA
                 
                 	LOOP_BTCCER:
000147 932d      		ST X+,R18
000148 9513      		INC R17
000149 1710      		CP R17,R16
00014a f3e0      		BRLO LOOP_BTCCER
                 
00014b 9310 046a 		STS ocupacion_tabla_temp_ram,R17 ;actualizamos el nivel de ocupación de la tabla
00014d 9508      ret
                 .include "copy_ram_to_sd.asm"	;Rutinas para copiar datos de la RAM a la SD
                 
                  * copy_ram_to_sd.asm
                  *
                  *  Created: 20/10/2015 09:53:15 a.m.
                  *   Author: mtomas
                  */ 
                 
                 COPY_FROM_TO:
                 ;La idea es poder hacer una funcion que pueda copiar datos desde una ubicacion a otra
                 ;independientemente de donde a donde sea
                 ;Tal vez se usaria para copiar datos de la RAM a la SD, y luego para copiar de la SD a la PC
                 .include "temperatura.asm"		;Rutinas para leer la medicion del sensor de temperatura
00014e 9508      
                  * temperatura.asm
                  *
                  *  Created: 20/10/2015 10:26:21 a.m.
                  *   Author: mtomas
                  */ 
                 
                  DAME_TEMPERATURA:
                 ; Lee el valor de la tension ingresada por el puerto conectado al sensor
                 ; Convierte el valor leido a grados celsius
                 ; Guarda la temperatura medida en la variable "temperatura"
                 ; Usa R16, R17, R18
                 	
                 	;Activamos el ADC
                 	;LDI R17,0b11000111 ;enable, start conversion y set prescaler
                 						;el prescaler quedo en 111 (128) para que 20Mhz/128 caiga 
                 						;dentro del rango de 50khz a 200khz)
                 	;STS ADCSRA,R17
                 
                 	;Toma dato de temperatura del ADC
                 	;Para eso miramos que el ADC haya terminado de procesar la informacion verificando el estatus del flag 4 de ADCSRA.
00014f 9110 007a 	ldS R17, ADCSRA    
000151 6410      	ori R17, (1<<ADSC)
000152 9310 007a 	sts ADCSRA, R17
                 
                 	CAPTURA_TEMPERATURA:
000154 9110 007a 		LDS R17,ADCSRA
000156 fd16      		SBRC R17,ADSC			;saltea la siguiente instruccion si el bit 4 del registro esta en 1
000157 cffc      		RJMP CAPTURA_TEMPERATURA
                 
                 	;Si se llega a este punto, es porque el ADC ya termino la conversion a digital
000158 9110 0078 	LDS R17,ADCL
00015a 9120 0079 	LDS R18,ADCH
                 	;Notar que no usaremos el ADCH pues no vamos a tener temperaturas tan altas
                 	
                 	;Notar que la resolucion del ADC es de 10 bits y como alimentamos con 5V 
                 	;entonces cada paso del ADC equivale a 5mV (pues 5V/1024 es aprox 5mV)
                 
                 	;La salida del LM35 varía linealmente con la temperatura (10 mV x °C)
                 	;Por lo tanto tendremos una resolucion de medio grado
                 
                 	;La salida del ADC puede pasarse a Volts haciendo: Vin*(1024) / Vref
                 	;donde Vin es la tension que entro por la pata del adc (lo que envio el LM35)
                 	;y donde Vref es 5V 
                 	;La conversión a °C entonces seria:
                 	;°C = [Vin*(1024)]/[5v] = Vin *  205
                 
                 	;LDI R18,205
                 	;FMUL R17,R18
00015c 9488      	CLC 
00015d 9517      	ROR R17
                 	;El resultado del producto está en R1:R0, pero utilizo solo R0 porque las temperaturas son bajas
                 //	MOV R16,R18
                 //	call Putchr
                 	;A continuacion se realiza la conversion de la temperatura en R16, de numero binario a BCD
00015e 940e 0163 	CALL BIN_TO_BCD
                 
000160 9300 0160 	STS temperatura,R16
000162 9508       ret
                 
                 
                 BIN_TO_BCD: 
                 	;En R16 viene  el dato a convertir
                 	;Se usan los registros R17 y R18
                 	;En nuestro caso tendremos temperaturas menores a 100 grados celsius, 
                 	;con lo cual vamos a convertir numeros menores a 100.
                 
000163 e010      	LDI R17,0 ;decenas
                 
                 	BIN_MAYOR_A_DIEZ:
000164 300a      		CPI R16,10 ;si es mayor a diez, aumentar contador de decenas y restar 10 al numero binario
000165 f018      		BRLO BIN_MAYOR_A_UNO
000166 500a      		subi R16,10
000167 9513      		inc R17
000168 cffb      		RJMP BIN_MAYOR_A_DIEZ
                 
                 	BIN_MAYOR_A_UNO:
                 	;En este punto, en R17 esta la cantidad de decenas y en R16 la cantidad de unidades.
                 	;Finalmente, se unen ambas partes en un solo valor BCD 
000169 0f01      	ADD R16,R17
00016a 9508      
                 .include "tx.asm"			;Rutinas transmitir datos a la pc
                 
                 .EQU XTALFREQ=8000000 
                 .EQU UBRR=(XTALFREQ/(16*BAUDRATE))-1 
                 
                 ;Z puntero al dato ,R16 char a mandar
                 SENDDATA:
00016b 9105      	LPM R16,Z+
00016c 3000      	cpi  R16,0
00016d f039      	BREQ ENDSENDDATA
                 
00016e 9300 00c6 	sts  UDR0,R16
                 WAITSEND:
000170 9100 00c0 	LDS R16,UCSR0A
000172 ff05      	sbrs R16,UDRE0 ;espera a que termine de mandar el dato
000173 cffc      	rjmp WAITSEND 
000174 cff6      	rjmp SENDDATA
                 ENDSENDDATA:	
000175 9508      	ret
                 
                 SENDDATAFROMMEM:
000176 910d      	LD R16,X+
000177 3000      	cpi  R16,0
000178 f039      	BREQ ENDSENDDATA2
                 
000179 9300 00c6 	sts  UDR0,R16
                 WAITSEND2:
00017b 9100 00c0 	LDS R16,UCSR0A
00017d ff05      	sbrs R16,UDRE0 ;espera a que termine de mandar el dato
00017e cffc      	rjmp WAITSEND2 
00017f cff6      	rjmp SENDDATAFROMMEM
                 ENDSENDDATA2:	
000180 9508      	ret
                 
                 ;Z puntero a donde se guarda el dato. Con 0 se termina el dato,R16 q llega
                 RECEIVEDATA:
000181 9100 00c0 	LDS R16, UCSR0A
000183 ff07      	sbrs R16, RXC0 ;espera a que llegue el dato
000184 cffc      	rjmp RECEIVEDATA
000185 b105      	in R16,UDRE0
000186 3000      	cpi R16,0
000187 f009      	BREQ ENDRECEIVEDATA
000188 930d      	st X+,R16
                 ENDRECEIVEDATA:
000189 9508      	ret
                 
                 Getchr: 
00018a 9110 00c0 	lds		R17,UCSR0A 
00018c ff17      	sbrs	R17,	RXC0
00018d cffc      	rjmp		Getchr 
00018e 9120 00c6 	lds	R18,	UDR0
000190 9508      	ret
                 
                 	EXT_INT0:
                 	EXT_INT1:
                 COMUPC:
000191 94f8      	CLI
000192 e100      	ldi r16,0b10000
000193 b90b      	out PORTD,r16
000194 e0e0      	LDI  ZL, LOW(MSJ1<<1)   ;cargo msj
000195 e0fa      	LDI  ZH, HIGH(MSJ1<<1)
000196 dfd4      	RCALL SENDDATA
000197 e6ab      	LDI  XL, LOW(indata)   ;cargo la posicion donde llega el dato
000198 e0b4      	LDI  XH, HIGH(indata)
000199 dff0      	RCALL Getchr
00019a d040      	RCALL Putchr
                 //	LDI  ZL, LOW(indata)   ;cargo el primer dato
                 //	LDI  ZH, HIGH(indata)
                 //	LD R16,Z
00019b 3321      	cpi R18,49 ;si es uno borra la sd
00019c f419      	BRNE CMPTXDATA
00019d d039      	rcall BORRARSD
00019e 9478      	SEI
00019f 9518      	reti ;sale interrupcion
                 CMPTXDATA:
0001a0 3322      	cpi R18,50 ;si transmito lo q hay en la sd
0001a1 f419      	BRNE CMPSETHORA
0001a2 d032      	rcall TXDATA
0001a3 9478      	SEI
0001a4 9518      	reti ;sale interrupcion
                 CMPSETHORA:
0001a5 3323      	cpi R18,51 ;si es tres, seteo la hora
0001a6 f751      	BRNE COMUPC ;si mando mal, vuelve a imprimir el msj
0001a7 d002      	rcall SETHORA
0001a8 9478      	SEI
0001a9 9518      	reti ;sale interrupcion
                 
                 SETHORA:
0001aa e4ea      	LDI  ZL, LOW(MSJ3<<1)   ;cargo msj
0001ab e0fa      	LDI  ZH, HIGH(MSJ3<<1)
0001ac dfbe      	RCALL SENDDATA
0001ad e6ab      	LDI  XL, LOW(indata)   ;cargo la posicion donde llega el dato
0001ae e0b4      	LDI  XH, HIGH(indata)
                 
0001af dfda      	RCALL Getchr
0001b0 932d      	st X+,R18
0001b1 dfd8      	RCALL Getchr; dia
0001b2 932d      	st X+,R18
                 
0001b3 dfd6      	RCALL Getchr
                 	
0001b4 dfd5      	RCALL Getchr ;mes
0001b5 932d      	st X+,R18
0001b6 dfd3      	RCALL Getchr
0001b7 932d      	st X+,R18
                 
0001b8 dfd1      	RCALL Getchr
                 
0001b9 dfd0      	RCALL Getchr ;año
0001ba 932d      	st X+,R18
0001bb dfce      	RCALL Getchr
0001bc 932d      	st X+,R18
                 
0001bd dfcc      	RCALL Getchr
                 
0001be dfcb      	RCALL Getchr
0001bf 932d      	st X+,R18
0001c0 dfc9      	RCALL Getchr; hora
0001c1 932d      	st X+,R18
                 
0001c2 dfc7      	RCALL Getchr
                 	
0001c3 dfc6      	RCALL Getchr ;minutos
0001c4 932d      	st X+,R18
0001c5 dfc4      	RCALL Getchr
0001c6 932d      	st X+,R18
                 
0001c7 dfc2      	RCALL Getchr
                 
0001c8 dfc1      	RCALL Getchr ;segundos
0001c9 932d      	st X+,R18
0001ca dfbf      	RCALL Getchr
0001cb 932d      	st X+,R18
                 
0001cc e020      	LDI R18,0
0001cd 932d      	st X+,R18
                 
0001ce e6ab      	LDI  XL, LOW(indata)   ;cargo la posicion donde llega el dato
0001cf e0b4      	LDI  XH, HIGH(indata)
0001d0 dfa5      	RCALL SENDDATAFROMMEM
                 
                 	//RCALL RECEIVEDATA
0001d1 e6ab      	LDI  XL, LOW(indata)   ;cargo la posicion donde llega el dato
0001d2 e0b4      	LDI  XH, HIGH(indata)
0001d3 d01d      	RCALL FORMAT_IN_DATE;guardar la fecha
0001d4 9508      	ret
                 
                 TXDATA:
                 ;	call READSD ;meter esto en un loop hasta que este vacia la sd
0001d5 df95      	rcall SENDDATA
0001d6 9508      	ret	
                 
                 BORRARSD:
0001d7 e3ee      	LDI  ZL, LOW(MSJ2<<1)   ;cargo msj
0001d8 e0fa      	LDI  ZH, HIGH(MSJ2<<1)
0001d9 df91      	RCALL SENDDATA
0001da 9508      	ret
                 
                 Putchr: ; Wait for empty transmit buffer
0001db 9100 00c0 	LDS		R16,UCSR0A
0001dd ff05      	sbrs	R16,UDRE0
0001de cffc      	rjmp 	Putchr
0001df 9320 00c6 	sts		UDR0,R18
                 	WAITPUTCHAR:
0001e1 9100 00c0 	LDS		R16,UCSR0A
0001e3 ff05      	sbrs	R16,UDRE0
0001e4 cffc      	rjmp 	WAITPUTCHAR
0001e5 9508      	ret ; Put data from (r18)
                 	
                 
                 ASCII_TO_BIN:
0001e6 910d      	LD R16,X+
0001e7 5300      	SUBI R16,48
0001e8 0f00      	LSL R16
0001e9 0f00      	LSL R16
0001ea 0f00      	LSL R16
0001eb 0f00      	LSL R16
0001ec 2f10      	MOV R17,R16
0001ed 910d      	LD R16,X+
0001ee 5300      	SUBI R16,48
0001ef 0f01      	ADD R16,R17
0001f0 9508      RET
                 
                 FORMAT_IN_DATE:
0001f1 dff4      	RCALL ASCII_TO_BIN
0001f2 9300 0167 	STS set_dia,R16
0001f4 dff1      	RCALL ASCII_TO_BIN
0001f5 9300 0168 	STS set_mes,R16
0001f7 dfee      	RCALL ASCII_TO_BIN
0001f8 9300 0169 	STS set_anio,R16
0001fa dfeb      	RCALL ASCII_TO_BIN
0001fb 9300 016a 	STS set_horas,R16
0001fd dfe8      	RCALL ASCII_TO_BIN
0001fe 9300 016b 	STS set_minutos,R16
000200 dfe5      	RCALL ASCII_TO_BIN
000201 9300 016c 	STS set_segundos,R16
                 .include "setup.asm"		;Rutinas configurar el micro
000203 9508      
                 	;setea el PORTC.0 como entrada para la lectura de temperaturas
                  	;usa R17
                 	;LDI R17,0x00	;Load 0b00000000 in R17
                 	;OUT DDRC,R16	;Configure PortC as an Input port
                 	;CBI DDRC,0 ;configura PORTC.0 como Input port
                 
                 	;Configuración del ADC
000204 e410      	LDI R17,(1<<REFS0)
000205 9310 007c 	STS ADMUX,R17
000207 e817      	ldi R17, (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)
000208 9310 007a 	sts ADCSRA, R17
                 	;Para elegir la referencia:
                 	;CBI ADMUX,7
                 	;CBI ADMUX,6
                 	;Para ajustar a izquierda
                 	;SBI ADMUX,5
                 	;Para definir que vamos a usar el ADC0 para tomar la temperatura
                 	;CBI ADMUX,3 
                 	;CBI ADMUX,2
                 	;CBI ADMUX,1
                 	;CBI ADMUX,0
                 
                 	;configuro el puerto serie
00020a e000      	ldi R16,HIGH(UBRR)
00020b 9300 00c5 	sts  UBRR0H,R16
00020d e303      	ldi R16,LOW(UBRR)
00020e 9300 00c4 	sts  UBRR0L,R16 ;seteo los baudios
000210 e108      	ldi R16,(1<<RXEN0)|(1<<TXEN0)
000211 9300 00c1 	sts  UCSR0B,R16  ;rx,tx habilitado
000213 e00e      	ldi R16, (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01)
000214 9300 00c2 	sts  UCSR0C,R16 ;8bits, 1 de stop sin pariedad
                 	
000216 e000      	ldi R16,0
                 	;configuro el stack
                 
000217 e008      	LDI R16,HIGH(RAMEND)
000218 bf0e          OUT SPH,R16
000219 ef0f          LDI R16,LOW(RAMEND)
00021a bf0d          OUT SPL,R16
                 
                 	;configuro las interrupciones externas
                 
00021b e00c      	LDI R16,0b1100;
00021c b90b      	OUT PORTD,R16
                 
00021d e00a      	LDI R16,0b1010  ;la interrupcion es por flanco ascendente
00021e 9300 0069 	STS EICRA,R16
                 
000220 e003      	LDI R16,0b11; habilito las interrupciones en las patas 4 y 5
000221 bb0d      	OUT  EIMSK,R16
                 
000222 e003      	ldi R16, 0b11
000223 bb0c      	OUT EIFR, R16 
                 
                 
                 ;	ldi r16,0
                 	;configuro isp para el rtc
                 	;LDI R16,1
                 	;STS TWSR,R16
                 
                 
                 	;activar interrupciones
000224 9478      	SEI
000225 9508      
                 /***********************************************************************/					
                 									           
                 PROGRAMA:
                 
000226 940e 0204 	CALL SETUP
                 ;	CALL COMUPC
000228 df0a      	RCALL BORRAR_TABLA_FECHA_HORA_TEMP_EN_RAM ;inicializa la tabla
                 
                 	INICIO_LOOP_SENSADO:
                 		;CLI
                 		;leer temperatura T
000229 df25      		RCALL DAME_TEMPERATURA
                 		;Leer fecha y hora
                 		
00022a de0d      		RCALL DAME_FECHA_HORA
                 		;almacenar en memoria ram: fecha+hora+temperatura
                 		;RCALL ESCRIBIR_FECHA_HORA_TEMP_EN_RAM
                 
                 		;si la tabla de temperaturas tiene más de 512 bytes, copiar tabla en SD y luego limpiar RAM
                 		;LDS R17,ocupacion_tabla_temp_ram
                 		;CPI R17,LIM_MAX_TABLA_TEMPERATURAS
                 		;BRMI A_DORMIR
                 		;Copiar RAM to SD
                 		;RCALL BORRAR_TABLA_FECHA_HORA_TEMP_EN_RAM
00022b 9478      		SEI
                 		A_DORMIR:
                 			
                 			;Dormir por N tiempo
00022c e000      			ldi r16,0b00000
00022d b90b      			out PORTD,r16
00022e 9588      			sleep
                 
                 			
00022f cff9      		RJMP INICIO_LOOP_SENSADO
                 
                 	END: 
000230 cfff      		RJMP END 
                 
                 
000231 e100      	WAKEUP:ldi r16,0b10000
000232 b90b      			out PORTD,r16
000233 9518      	 RETI
                 
                 	.ORG 0x500  ;cambiar pos  ;msj para la pc                    
000500 2031
000501 6170
000502 6172
000503 6220
000504 726f
000505 6172
000506 2072
000507 4453
000508 322c
000509 7020
00050a 7261
00050b 2061
00050c 7274
00050d 6e61
00050e 6673
00050f 7265
000510 7269
000511 6420
000512 7461
000513 736f
000514 332c
000515 7020
000516 7261
000517 2061
000518 6573
000519 6574
00051a 7261
00051b 6820
00051c 726f
00051d 2061
00051e 000a      MSJ1: .DB "1 para borrar SD,2 para transferir datos,3 para setear hora ",'\n',0
00051f 4453
000520 6220
000521 726f
000522 6172
000523 6164
000524 000a      MSJ2: .DB "SD borrada",'\n',0
000525 6e49
000526 7267
000527 7365
000528 2065
000529 4444
00052a 4d2f
00052b 2f4d
00052c 4141
00052d 4820
00052e 3a48
00052f 4d4d
000530 533a
000531 2053


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328" register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  96 r17:  63 r18:  29 r19:   0 r20:   0 r21:  55 r22:   2 r23:   3 
r24:   0 r25:   0 r26:   6 r27:   6 r28:   1 r29:   1 r30:   3 r31:   3 
x  :  31 y  :   0 z  :   1 
Registers used: 14 out of 35 (40.0%)

"ATmega328" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   3 adiw  :   0 and   :   0 
andi  :  17 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   3 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 brlt  :   0 brmi  :   0 
brne  :   7 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  43 cbi   :   0 cbr   :   0 
clc   :   1 clh   :   0 cli   :   1 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   1 cpc   :   0 
cpi   :   8 cpse  :   0 dec   :   4 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :   2 jmp   :   2 
ld    :   3 ldd   :   0 ldi   :  66 lds   :  31 lpm   :   1 lsl   :  24 
lsr   :   0 mov   :   8 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   0 ori   :   1 out   :   8 pop   :   0 
push  :   0 rcall :  37 ret   :  30 reti  :   4 rjmp  :  17 rol   :   0 
ror   :   1 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   2 sbrs  :   9 sec   :   0 seh   :   0 
sei   :   5 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   1 spm   :   0 st    :  28 std   :   0 sts   :  35 
sub   :   0 subi  :   3 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 35 out of 113 (31.0%)

"ATmega328" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a66   1042    102   1144   32768   3.5%
[.dseg] 0x000100 0x000470      0    784    784    2048  38.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
